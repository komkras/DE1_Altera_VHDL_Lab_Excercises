--***************************************************************
--Name: Carlos Virguez
--Course Number: CET3136
--Description: 8-bit counter with enable and clear
--Inputs: SW9, SW0, KEY3
--Outputs: HEX3-0
--****************************************************************
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY counter_8bit IS
     PORT(
          SW   : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
          KEY  : IN STD_LOGIC_VECTOR(3 DOWNTO 2);
          HEX0 : OUT STD_LOGIC_VECTOR(0 TO 6);
          HEX1 : OUT STD_LOGIC_VECTOR(0 TO 6);
          HEX2 : BUFFER STD_LOGIC_VECTOR(0 TO 6);
          HEX3 : BUFFER STD_LOGIC_VECTOR(0 TO 6)
         );
END counter_8bit;

ARCHITECTURE behavioral OF counter_8bit IS

     SIGNAL en  : STD_LOGIC_VECTOR(7 DOWNTO 0);
     SIGNAL q   : STD_LOGIC_VECTOR(7 DOWNTO 0);
     SIGNAL clr : STD_LOGIC;
     SIGNAL clk : STD_LOGIC; 
     
--*******************************************************************************
--*********************************T Flip FLOP***********************************
--*******************************************************************************
          
          COMPONENT flip_flop IS
               PORT(
                    en, clr, clk : IN STD_LOGIC;
                    q            : OUT STD_LOGIC 
                    );
          END COMPONENT;
          
--*******************************************************************************
--******************************7 Segment Display********************************
--*******************************************************************************
          
          COMPONENT disp_7seg IS
               PORT(
                    c       : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
                    display : OUT STD_LOGIC_VECTOR(0 TO 6) 
                    );
          END COMPONENT; 
          
--******************************************************************************* 
BEGIN
     HEX0 <= "1111111";
     HEX1 <= "1111111";

     clk <= NOT KEY(3); -- KEY is 0 when pressed
     clr <= NOT SW(9);  -- Switch gets invertered to match lab instructions design
     
     en(0) <= SW(0);
     en(1) <= SW(0) AND q(0);
     en(2) <= en(1) AND q(1);
     en(3) <= en(2) AND q(2);
     en(4) <= en(3) AND q(3);
     en(5) <= en(4) AND q(4);
     en(6) <= en(5) AND q(5);
     en(7) <= en(6) AND q(6);
     
     counter0 : flip_flop PORT MAP(en(0), clr, clk, q(0));
     counter1 : flip_flop PORT MAP(en(1), clr, clk, q(1));
     counter2 : flip_flop PORT MAP(en(2), clr, clk, q(2));
     counter3 : flip_flop PORT MAP(en(3), clr, clk, q(3));
     counter4 : flip_flop PORT MAP(en(4), clr, clk, q(4));
     counter5 : flip_flop PORT MAP(en(5), clr, clk, q(5));
     counter6 : flip_flop PORT MAP(en(6), clr, clk, q(6));
     counter7 : flip_flop PORT MAP(en(7), clr, clk, q(7));
     
     disp0 : disp_7seg PORT MAP(q(3 DOWNTO 0), HEX2);
     disp1 : disp_7seg PORT MAP(q(7 DOWNTO 4), HEX3);
     
END behavioral;
